###############################################################################
# net.solarnetwork.jdbc.pool.hikari Configuration Admin properties
###############################################################################

###############################################################################
# service.factoryPid <string>
# 
# Should always be net.solarnetwork.jdbc.pool.hikari.

service.factoryPid = net.solarnetwork.jdbc.pool.hikari


###############################################################################
# serviceProperty.* <string>
# 
# OSGi service property values can be configured via properties that start 
# with "serviceProperty.". The service property key will be the property key
# value minus that prefix, the the service property value the configured
# property value. A common service property is "db". For example:
# 
# serviceProperty.db = central

serviceProperty.db = central


###############################################################################
# dataSourceFactory.filter <OSGi service filter>
# 
# An OSGi service filter that will match the 
# org.osgi.service.jdbc.DataSourceFactory service to use with this pool.
# For example:
#
# dataSourceFactory.filter = (osgi.jdbc.driver.class=org.postgresql.Driver)

dataSourceFactory.filter = (osgi.jdbc.driver.class=org.postgresql.Driver)


###############################################################################
# dataSource.* <string>
# 
# Properties to pass to the resolved DataSourceFactory to obtain a
# javax.sql.DataSource with. The "dataSource." prefix will be removed from the
# property keys passed to the factory. Common properties are "url", "user", and
# "password". For example:
#
# dataSource.url = jdbc:postgresql://localhost:5432/solarnetwork
# dataSource.user = solarnet
# dataSource.password = solarnet

dataSource.url = jdbc:postgresql://localhost:5432/solarnetwork
dataSource.user = solarnet
dataSource.password = solarnet


###############################################################################
# pingTest.query <sql>
#
# If configured, a DataSourcePingTest will be registered that uses this query
# to validate the pool is healthy. The query must return a java.sql.Date.
# For example, for Derby or Postgres:
#
# pingTest.query = VALUES CURRENT_DATE
# pingTest.query = SELECT CURRENT_DATE

pingTest.query = SELECT CURRENT_DATE


###############################################################################
# factory.exceptionHandlerSupport <boolean>
#
# If configured, the registered DataSource will be a 
# net.solarnetwork.dao.jdbc.SQLExceptionHandlerDataSourceProxy so any 
# registered net.solarnetwork.dao.jdbc.SQLExceptionHandler services will be
# invoked at runtime if an exception is thrown by the underlying DataSource.

factory.exceptionHandlerSupport = false


###############################################################################
# * <string>
# 
# Other properties will be used for the Hikari pool configuration itself.
# See https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby
# for a list of possible values. Note that a DataSource will be used in the
# pool configuration, so "dataSourceClassName" and "jdbcUrl" do not apply.
# For example:
#
# minimumIdle = 1
# maximumPoolSize = 20

minimumIdle = 1
maximumPoolSize = 20
